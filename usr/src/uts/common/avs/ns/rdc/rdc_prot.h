/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RDC_PROT_H_RPCGEN
#define	_RDC_PROT_H_RPCGEN

#include <rpc/rpc.h>
/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */


/*
 * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

/*
 * Auto generated from rdc_prot.x
 */

/* 
 * Network Replicator RPC spec
 */

/*
 * We don't define netbuf in RPCL, since it would contain structure member
 * names that would conflict with the definition of struct netbuf in
 * <tiuser.h>.  Instead we merely declare the XDR routine xdr_netbuf() here,
 * and implement it ourselves in rpc/rpcb_prot.c.
 */
#define xdr_netbuf	rdc_xdr_netbuf
#ifdef __cplusplus
extern "C" bool_t xdr_netbuf(XDR *, struct netbuf *);

#elif __STDC__
extern  bool_t xdr_netbuf(XDR *, struct netbuf *);

#else /* K&R C */
bool_t xdr_netbuf();

#endif /* K&R C */
#define	RDC_PORT 121
#define	RDC_MAXDATA 32768
#define	RDC_MAXNAMLEN 64
#define	RDC_BMAPBLKSIZE 1024
#define	RDC_MAXADDR 32
#define	RDC_MAXPENDQ 64
/*
 * Use this to limit the size of the net_pendvec_t array
 * to ~ 32k
 */
#define	RDC_PENDQLIM 1365

/*
 * Error status
 */

enum rdcstat {
	RDC_OK = 0,
	RDCERR_PERM = 1,
	RDCERR_NOENT = 2,
	RDCERR_NOMEM = 3
};
typedef enum rdcstat rdcstat;

/*
* Set state (V4)
*/

struct set_state4 {
	char netaddr[RDC_MAXADDR];
	char rnetaddr[RDC_MAXADDR];
	int netaddrlen;
	int rnetaddrlen;
	u_int flag;
	char pfile[RDC_MAXNAMLEN];
	char sfile[RDC_MAXNAMLEN];
};
typedef struct set_state4 set_state4;
#define	RDC_XDR_MAXNAMLEN RDC_MAXNAMLEN

struct set_state {
	struct netbuf netaddr;
	struct netbuf rnetaddr;
	int netaddrlen;
	int rnetaddrlen;
	u_int flag;
	char *pfile;
	char *sfile;
};
typedef struct set_state set_state;

/*
 * Get size of volume
 */

struct getsize {
	int cd;
};
typedef struct getsize getsize;

/*
 * Remote read (v5)
 */

struct rread {
	int cd;
	int len;
	int pos;
	int idx;
	int flag;
};
typedef struct rread rread;

/*
 * Remote read (v6)
 */

struct rread6 {
	int cd;
	int len;
	u_longlong_t pos;
	int idx;
	int flag;
};
typedef struct rread6 rread6;

/*
 * status OK from remote read
 */

struct readok {
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct readok readok;

struct readres {
	rdcstat status;
	union {
		readok reply;
	} readres_u;
};
typedef struct readres readres;

/*
 * Initiate bit map scoreboard transfer (v5)
 */

struct bmap {
	int cd;
	int dual;
	int size;
};
typedef struct bmap bmap;

/*
 * Initiate bit map scoreboard transfer (v6)
 */

struct bmap6 {
	int cd;
	int dual;
	u_longlong_t size;
};
typedef struct bmap6 bmap6;

/*
 * Scoreboard bitmap data (v5)
 */

struct net_bdata {
	int cd;
	int offset;
	int size;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct net_bdata net_bdata;

/*
 * Scoreboard bitmap data (v6)
 */

struct net_bdata6 {
	u_longlong_t offset;
	int size;
	int cd;
	int endoblk;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct net_bdata6 net_bdata6;

/*
 * Data transfer and allocation (v5)
 */

struct net_data5 {
	int local_cd;
	int cd;
	int pos;
	int len;
	int flag;
	int idx;
	int seq;
	int sfba;
	int endoblk;
	int nfba;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct net_data5 net_data5;

/*
 * Data transfer and allocation (v6)
 */

struct net_data6 {
	int local_cd;
	int cd;
	u_longlong_t pos;
	u_longlong_t qpos;
	u_longlong_t sfba;
	int nfba;
	int len;
	int flag;
	int idx;
	u_int seq;
	int endoblk;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct net_data6 net_data6;

struct net_pendvec {
	u_longlong_t apos;
	u_longlong_t qpos;
	int alen;
	u_int seq;
	int pindex;
};
typedef struct net_pendvec net_pendvec;

typedef net_pendvec net_pendvec_t;
/*
 * results returned from a netwrite request. (v6)
 * index = index number of request assigned by server when
 * requests is broken down into smaller chunks.
 * result = 0 request ok.
 * result = 1 request is pending.
 * result < 0 failure, set with -errno.
 * If the vecdata array is not empty, then it contains
 * a list of apos and alen
 * pairs of previously pending requests that have been written.
 */

struct netwriteres {
	int index;
	int result;
	u_int seq;
	struct {
		u_int vecdata_len;
		net_pendvec_t *vecdata_val;
	} vecdata;
};
typedef struct netwriteres netwriteres;

/*
 * Ping
 */

struct rdc_ping6 {
	char p_ifaddr[RDC_MAXADDR];
	char s_ifaddr[RDC_MAXADDR];
};
typedef struct rdc_ping6 rdc_ping6;

struct rdc_ping {
	struct netbuf p_ifaddr;
	struct netbuf s_ifaddr;
};
typedef struct rdc_ping rdc_ping;

#define	RDC_PROGRAM	100143
#define	RDC_VERSION5	5
#define	RDCPROC_NULL	0
extern  void * rdcproc_null_5();
#define	RDCPROC_GETSIZE	2
extern  int * rdcproc_getsize_5();
#define	RDCPROC_WRITE5	4
extern  int * rdcproc_write5_5();
#define	RDCPROC_READ5	5
extern  readres * rdcproc_read5_5();
#define	RDCPROC_STATE	7
extern  int * rdcproc_state_5();
#define	RDCPROC_PING4	8
extern  int * rdcproc_ping4_5();
#define	RDCPROC_BMAP	9
extern  int * rdcproc_bmap_5();
#define	RDCPROC_BDATA	10
extern  int * rdcproc_bdata_5();
#define	RDCPROC_GETSTATE4	12
extern  int * rdcproc_getstate4_5();
extern int rdc_program_5_freeresult();
#define	RDC_VERSION6	6
extern  void * rdcproc_null_6();
#define	RDCPROC_GETSIZE6	2
extern  u_longlong_t * rdcproc_getsize6_6();
#define	RDCPROC_WRITE6	4
extern  netwriteres * rdcproc_write6_6();
#define	RDCPROC_READ6	5
extern  readres * rdcproc_read6_6();
extern  int * rdcproc_state_6();
extern  int * rdcproc_ping4_6();
#define	RDCPROC_BMAP6	9
extern  int * rdcproc_bmap6_6();
#define	RDCPROC_BDATA6	10
extern  int * rdcproc_bdata6_6();
extern  int * rdcproc_getstate4_6();
extern int rdc_program_6_freeresult();
#define	RDC_VERSION7	7
extern  void * rdcproc_null_7();
extern  u_longlong_t * rdcproc_getsize6_7();
extern  netwriteres * rdcproc_write6_7();
extern  readres * rdcproc_read6_7();
extern  int * rdcproc_state_7();
extern  int * rdcproc_ping4_7();
extern  int * rdcproc_bmap6_7();
extern  int * rdcproc_bdata6_7();
extern  int * rdcproc_getstate4_7();
extern int rdc_program_7_freeresult();

/* the xdr functions */
extern bool_t xdr_rdcstat();
extern bool_t xdr_set_state4();
extern bool_t xdr_set_state();
extern bool_t xdr_getsize();
extern bool_t xdr_rread();
extern bool_t xdr_rread6();
extern bool_t xdr_readok();
extern bool_t xdr_readres();
extern bool_t xdr_bmap();
extern bool_t xdr_bmap6();
extern bool_t xdr_net_bdata();
extern bool_t xdr_net_bdata6();
extern bool_t xdr_net_data5();
extern bool_t xdr_net_data6();
extern bool_t xdr_net_pendvec();
extern bool_t xdr_net_pendvec_t();
extern bool_t xdr_netwriteres();
extern bool_t xdr_rdc_ping6();
extern bool_t xdr_rdc_ping();

#endif /* !_RDC_PROT_H_RPCGEN */
